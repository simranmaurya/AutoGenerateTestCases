openapi: 3.0.0

security:
  - Basic: [ ]

info:
  title: 'User example service'
  version: 1.0.0
  description: 'Example service specification to work with user storage'
  license:
    name: 'MIT'
  contact:
    name: 'manchenkoff'
    email: 'artyom@manchenkoff.me'

servers:
  - url: 'https://users.app'
    description: 'production'

  - url: 'https://stage.users.app'
    description: 'staging'

  - url: 'https://users.local'
    description: 'development'

tags:
  - name: Users
    description: 'User operations'

paths:
  /users:
    get:
      summary: 'Get user list'
      description: 'Method to get user list'
      operationId: GetUserList
      tags:
        - Users
      parameters:
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Offset'
      responses:
        200:
          $ref: '#/components/responses/GetUserListResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        500:
          $ref: '#/components/responses/InternalServerError'
    post:
      summary: 'Add new user'
      description: 'Method to add new user'
      operationId: AddUser
      security:
        - Basic: [ ]
      tags:
        - Users
      requestBody:
        $ref: '#/components/requestBodies/AddUserRequest'
      responses:
        201:
          $ref: '#/components/responses/AddUserResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        500:
          $ref: '#/components/responses/InternalServerError'

  /users/{uuid}:
    parameters:
      - $ref: '#/components/parameters/UserUUID'
    get:
      summary: 'Get user model'
      description: 'Method to get user details'
      operationId: GetUser
      tags:
        - Users
      responses:
        200:
          $ref: '#/components/responses/UserResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        500:
          $ref: '#/components/responses/InternalServerError'
    put:
      summary: 'Update existed user model'
      operationId: UpdateUser
      tags:
        - Users
      responses:
        default:
          $ref: '#/components/responses/Empty'
        200:
          $ref: '#/components/responses/Empty'
        400:
          $ref: '#/components/responses/BadRequest'
        500:
          $ref: '#/components/responses/InternalServerError'

components:
  securitySchemes:
    Basic:
      type: http
      scheme: basic

  parameters:
    Limit:
      name: limit
      in: query
      description: 'Result items limit'
      allowEmptyValue: false
      example: 10
      required: true
      schema:
        type: integer

    Offset:
      name: offset
      in: query
      description: 'Result items start offset'
      allowEmptyValue: false
      example: 0
      required: true
      schema:
        type: integer

    UserUUID:
      name: uuid
      in: path
      description: 'User unique id'
      allowEmptyValue: false
      example: '12345678-1234-5678-1234-567812345678'
      required: true
      schema:
        type: string
        format: uuid

  requestBodies:
    AddUserRequest:
      description: 'New user model request'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'

  responses:
    BadRequest:
      description: 'Bad request or parameters'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BadRequestError'

    InternalServerError:
      description: 'Internal error'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InternalServerError'

    Empty:
      description: 'Empty successful response'

    GetUserListResponse:
      description: 'Successful user list response'
      content:
        application/json:
          schema:
            type: object
            required:
              - total_count
              - users
            properties:
              total_count:
                type: integer
                description: 'Total count of users'
              users:
                type: array
                items:
                  $ref: '#/components/schemas/User'

    AddUserResponse:
      description: 'Successful addition user response'
      content:
        application/json:
          schema:
            type: object
            required:
              - user
            properties:
              user:
                $ref: '#/components/schemas/User'

    UserResponse:
      description: 'Successful user response'
      content:
        application/json:
          schema:
            type: object
            required:
              - user
            properties:
              user:
                $ref: '#/components/schemas/User'

  schemas:
    BadRequestError:
      type: object
      required:
        - code
        - error
      properties:
        code:
          type: integer
          example: 1044
          description: 'Internal error code'
        error:
          type: string
          example: 'Invalid user id value'
          description: 'Error details'

    InternalServerError:
      type: object
      required:
        - code
        - error
      properties:
        code:
          type: integer
          example: 1
          description: 'Internal error code'
        error:
          type: string
          example: 'Unexpected server error'
          description: 'Error details'

    UUIDObject:
      type: object
      required:
        - uuid
      properties:
        uuid:
          type: string
          format: uuid
          example: '12345678-1234-5678-1234-567812345678'
          description: 'Unique object id'

    User:
      allOf:
        - $ref: '#/components/schemas/UUIDObject'
        - required:
            - login
            - email
            - avatar
        - properties:
            login:
              type: string
              example: 'super-admin'
              description: 'User login or nickname'
            email:
              type: string
              format: email
              example: 'user@mail.com'
              description: 'User E-mail address'
            avatar:
              type: string
              format : uri
              example: 'https://github.com/manchenkoff/openapi3-parser'
              description: 'User Avatar URL'
